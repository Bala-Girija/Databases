Comments:
  Single line comment: Use '#' symbol
  Multiline comments: /* multiple lines */

SHOW DATABSES;
#SHORTCUT EXECUTE A QUERY
CTRL+SHIFT+ENTER
CTRL+ENTER
USE WORLD;
SHOW TABLES;
SELECT * FROM CITY;
SELECT * FROM COUNTRYLANGUAGE;
CREATE DATABASE CUSTOMERS;
SHOW DATABASES;
DROP DATABASE CUSTOMERS;
CREATE DATABASE CUSTOMERS;
# Create table in databases
CREATE TABLE CUSTOMER_INFO(
        ID INTEGER,
        FIRST_NAME VARCHAR(10),
        LAST_NAME VARCHAR(10)
);

SHOW TABLES ;

SELECT * FROM TABLE CUSTOMER_INFO;
INSERT INTO CUSTOMER_INFO(ID,FIRST_NAME,LAST_NAME) VALUES(1,'DEEKSHA','D');
INSERT INTO CUSTOMER_INFO(ID,FIRST_NAME,LAST_NAME) VALUES(2,'DEEPAK','SHARMA');

DROP TABLE CUSTOMER_INFO;
SHOW TABLES;
DROP DATABASE CUSTOMERS;
SHOW DATABASES;

CREATE DATABASE CUSTOMERS;
SHOW DATABASES;
use CUSTOMERS;

CREATE TABLE CUSTOMER_INFO(
        ID INTEGER auto_increment,
        FIRST_NAME VARCHAR(25),
        LAST_NAME VARCHAR(25),
        SALARY INTEGER,
        PRIMARY KEY(ID)
);

SHOW TABLES;
SELECT * FROM CUSTOMER_INFO;

#INSERT RECORDS IN TABLE
INSERT INTO CUSTOMER_INFO(FIRST_NAME,LAST_NAME,SALARY)
VALUES
('JOHN','DANIEL',50000),
('KRISH','NAIK',60000),
('DARIUS','BENGALI',70000),
('CHANDAN','KUMAR',40000),
('ANKIT','SHARMA',NULL);

SELECT * FROM CUSTOMER_INFO;
SELECT * FROM CUSTOMER_INFO WHERE SALARY IS NULL;

SELECT * FROM CUSTOMER_INFO WHERE SALARY IS NOT NULL;

#SQL UPDATE STATEMENT TO REPLACE NULL VALUES
UPDATE CUSTOMER_INFO SET SALARY=50000 WHERE ID=5;
SELECT * FROM CUSTOMER_INFO;
##SQL DELETE STATEMENT
DELETE FROM CUSTOMER_INFO WHERE ID=5;
SELECT * FROM CUSTOMER_INFO;

##SQL ALTER TABLE
##ADD COLUMN IN EXISTING TABLE
ALTER TABLE CUSTOMER_INFO ADD EMAIL VARCHAR(25); 
SELECT * FROM CUSTOMER_INFO;
ALTER TABLE CUSTOMER_INFO ADD DOB DATE;
SELECT * FROM CUSTOMER_INFO;

##ALTER TABLE MODIFY COLUMN
ALTER TABLE CUSTOMER_INFO MODIFY DOB YEAR;
DESC CUSTOMER_INFO;

##ALTER TABLE TO DROP COLUMN
ALTER TABLE CUSTOMER_INFO DROP COLUMN EMAIL;
USE CUSTOMERS;
CREATE TABLE STUDENT(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT 
) ;

DESC STUDENT;
ALTER TABLE STUDENT MODIFY AGE INT NOT NULL;
DESC STUDENT;

CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT NOT NULL,
UNIQUE(ID)
);

INSERT INTO PERSON VALUES(1,'KRISH','NAIK',31);

SELECT * FROM PERSON;
INSERT INTO PERSON VALUES(2,'KRISH1','NAIK1',31);
INSERT INTO PERSON VALUES(1,'KRISH2','NAIK2',31);
ALTER TABLE PERSON ADD UNIQUE(FIRST_NAME);
DESC PERSON;
ALTER TABLE PERSON ADD CONSTRAINT UC_PERSON UNIQUE(AGE,FIRST_NAME);


ALTER TABLE PERSON DROP INDEX UC_PERSON;
DESC PERSON;

#PRIMARY KEY
CREATE TABLE PERSON1(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25),
AGE INT,
CONSTRAINT PK_PERSON PRIMARY KEY(ID,LAST_NAME)
);

DESC PERSON1;
ALTER TABLE PERSON1 DROP PRIMARY KEY;
ALTER TABLE PERSON1 ADD PRIMARY KEY(ID);


CREATE TABLE PERSON2(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT,
PRIMARY KEY(ID)
);

DESC PERSON3;

DROP TABLE PERSON;
CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT,
CONSTRAINT PK_PERSON PRIMARY KEY(ID,LAST_NAME)
);

DESC PERSON;
DROP TABLE PERSON;
CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT
);


ALTER TABLE PERSON ADD PRIMARY KEY(ID);
DESC PERSON;
DROP TABLE PERSON;
CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT
);
ALTER TABLE PERSON ADD CONSTRAINT PK_PERSON PRIMARY KEY(ID,AGE);
DESC PERSON;
DROP TABLE PERSON;

--FORIEGN KEY
CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT,
SALARY INT,
PRIMARY KEY(ID)
);

CREATE TABLE DEPARTMENT(
ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
DEPARTMENT_NAME VARCHAR(25) NOT NULL,
PRIMARY KEY(DEPARTMENT_ID),
CONSTRAINT FK_PERSONDEPARTMENT FOREIGN KEY(ID) REFERENCES PERSON(ID)
);

DROP TABLE DEPARTMENT;

CREATE TABLE DEPARTMENT(
ID INT NOT NULL,
DEPARTMENT_ID INT NOT NULL,
DEPARTMENT_NAME VARCHAR(25) NOT NULL,
PRIMARY KEY(DEPARTMENT_ID),
CONSTRAINT FK_PERSONDEPARTMENT FOREIGN KEY(ID) REFERENCES PERSON(ID)
);


ALTER TABLE DEPARTMENT ADD FOREIGN KEY(ID) REFERENCES PERSON(ID);
## CHECK CONSTRAINTS
DROP TABLE DEPARTMENT;

DROP TABLE PERSON;

CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT,
SALARY INT,
PRIMARY KEY(ID),
CHECK(SALARY<50000)
);

DESC PERSON;
INSERT INTO PERSON VALUES(1,'Krish','Naik',31,600000);
SELECT * FROM PERSON;
INSERT INTO PERSON VALUES(1,'Krish','Naik',31,40000);
SELECT * FROM PERSON;
## DEFAULT CONSTRAINT
DROP TABLE PERSON;

CREATE TABLE PERSON(
ID INT NOT NULL,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
CITY_NAME VARCHAR(25) DEFAULT 'BANGALORE'
);

ALTER TABLE PERSON ALTER CITY_NAME DROP DEFAULT;

/*MY SQL INDEXES
CREATE INDEX statement in SQL is used to create indexes in tables.
The indexes are used to retrieve data from the database more quickly than others.
The user can not see the indexes,and they are just used to speed up queries /searches.
Note: Uopdating the table with indexes takes a lot of time than updating a table with out index.
It is because the indexes also need an update.
So,only create indexes on those columns that will be frequently searched against.
*/
USE CUSTOMERS;
SHOW TABLES;
CREATE INDEX INDEX_CITY_NAME ON PERSON(CITY_NAME);
DROP TABLE STUDENT;

CREATE TABLE STUDENT(
ID INT NOT NULL,
FIRST_NAME VARCHAR(24),
LAST_NAME VARCHAR(25),
AGE INT
);


DESC STUDENT;

CREATE INDEX INDEX_AGE ON STUDENT(AGE);
CREATE INDEX INDEX_AGE_FIRST_NAME ON STUDENT(AGE,FIRST_NAME);
ALTER TABLE STUDENT DROP INDEX INDEX_AGE;

##  VIEWS
    VIEW IS A VIRTUAL TABLE BASED ON THE RESULT SET OF AN SQL QUERY
USE CUSTOMERS;
DROP TABLE STUDENT;
CREATE TABLE STUDENT(
STUDENTID INT AUTO_INCREMENT,
FIRST_NAME VARCHAR(25) NOT NULL,
LAST_NAME VARCHAR(25) NOT NULL,
AGE INT,
PRIMARY KEY(STUDENTID)

);
SELECT * FROM STUDENT;
INSERT INTO STUDENT VALUES(1,"KRISH","NAIK",31),(2,"KRISH1","NAIK1",31),(3,"SAM","JOE",31);

CREATE TABLE DEPARTMENT(
STUDENT_ID INT AUTO_INCREMENT,
DEPARTMENT_NAME VARCHAR(25) NOT NULL,
FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(STUDENTID)
);


DESC DEPARTMENT;


INSERT INTO DEPARTMENT VALUES(1,'COMPUTER SCIENCE'),(2,'ELECTRONICS'),(3,'MECHANICAL');


SELECT * FROM DEPARTMENT;
SELECT * FROM STUDENT;

SELECT FIRST_NAME,LAST_NAME,AGE FROM STUDENT INNER JOIN DEPARTMENT USING(STUDENTID);
CREATE VIEW STUDENT_INFO AS SELECT FIRST_NAME,LAST_NAME,AGE FROM STUDENT INNER JOIN DEPARTMENT USING(STUDENTID);
SELECT * FROM STUDENT_INFO;
DROP VIEW STUDENT_INFO;
## SQL JOINS
    SELECT * FROM STUDENTS;
    SELECT * FROM DEPARTMENT;
INSERT INTO STUDENT VALUES(5,'RAMESH','SINGH',27);
SELECT * FROM STUDENT INNER JOIN DEPARTMENT ON STUDENT.STUDENTID=DEPARTMENT.STUDENTID;
SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT INNER JOIN DEPARTMENT ON STUDENT.STUDENTID=DEPARTMENT.STUDENTID;
SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT LEFT JOIN DEPARTMENT ON STUDENT.STUDENTID=DEPARTMENT.STUDENTID;
SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT RIGHT JOIN DEPARTMENT ON STUDENT.STUDENTID=DEPARTMENT.STUDENTID;
## FULL OUTER JOIN
SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT LEFT JOIN DEPARTMENT ON STUDENT.STUDENTID=DEPARTMENT.STUDENTID UNION SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT RIGHT JOIN DEPARTMENT ON STUDENT.STUDENTID=DEPARTMENT.STUDENTID;

## CROSS JOIN
SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT CROSS JOIN DEPARTMENT;
## NATURAL JOIN
SELECT STUDENT.FIRST_NAME,STUDENT.LAST_NAME,STUDENT.AGE,DEPARTMENT.DEPARTMENT_NAME FROM STUDENT NATURAL JOIN DEPARTMENT;


## STORED PROCEDURE
USE CUSTOMERS;
CREATE PROCEDURE `get_student_info` ()
BEGIN
SELECT * FROM STUDENT;
END

USE `CUSTOMERS`;
DROP procedure IF EXISTS `get_student_info`;

DELIMITER $$
USE `CUSTOMERS`$$
CREATE PROCEDURE `get_student_info` ()
BEGIN
SELECT * FROM STUDENT;
END$$

DELIMITER ;

CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_info`()
BEGIN
SELECT * FROM STUDENT;
END

call get_student_info();

CREATE PROCEDURE `get_student_info` ()
BEGIN
SELECT * FROM STUDENT where student.age=31;
END

call get_student_info();


USE `CUSTOMERS`;
DROP procedure IF EXISTS `get_student_info`;

DELIMITER $$
USE `CUSTOMERS`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_info`(IN AGE INT)
BEGIN
SELECT * FROM STUDENT where STUDENT.AGE=AGE;
END$$

DELIMITER ;

call get_student_info(27);
******************
USE `customers`;
DROP procedure IF EXISTS `get_student_info`;

USE `customers`;
DROP procedure IF EXISTS `customers`.`get_student_info`;
;

DELIMITER $$
USE `customers`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_info`(out records INT)
BEGIN
SELECT count(*) into records FROM STUDENT where STUDENT.AGE=31;
END$$

DELIMITER ;
;

call get_student_info(@record);
select @record as Totalrecords;
******************************
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_student_info`(inout records int,in age int)
BEGIN
SELECT count(*) into records FROM STUDENT where STUDENT.AGE=age;
END

call get_student_info(@record,31);
select @record as Totalrecords;

